name: Build project
on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

jobs:
  linux_build:
    runs-on: ubuntu-latest
    steps:
      - name: Install requirements
        run: |
          sudo apt-get update
          sudo apt-get install -yq make git gcc pkg-config libssl-dev cmake

      - name: Clone main repository
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build project
        run: |
          cmake -B build -G "Unix Makefiles" -DCMAKE_C_FLAGS="-Werror" -DCMAKE_BUILD_TYPE=Hardened .
          make -C build

  cygwin_build:
    runs-on: windows-latest
    defaults:
      run:
        shell: C:\tools\cygwin\bin\bash.exe --login -o igncr '{0}'

    steps:
      - name: Set up Cygwin and install requirements
        uses: egor-tensin/setup-cygwin@v3
        with:
          platform: x64
          packages: make gcc-core pkgconf libssl-devel cmake python3

      - name: Clone main repository
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build project
        run: |
          cd "$GITHUB_WORKSPACE"
          cmake -B build -G "Unix Makefiles" -DCMAKE_C_FLAGS="-Werror" -DCMAKE_BUILD_TYPE=Hardened .
          make -C build

      - name: Clone mpreisler/mingw-bundledlls repository
        uses: actions/checkout@v2
        with:
          repository: mpreisler/mingw-bundledlls
          path: mingw-bundledlls

      - name: Copy the required DLLs
        run: |
          cd "$GITHUB_WORKSPACE/build"
          "$GITHUB_WORKSPACE/mingw-bundledlls/mingw-bundledlls" --copy oshd.exe

      - name: Upload binaries and DLLs artifact
        uses: actions/upload-artifact@v2
        with:
          name: osh-vpn-cygwin
          path: |
            ${{ github.workspace }}/build/*.exe
            ${{ github.workspace }}/build/*.dll